(this["webpackJsonpshader-examples"]=this["webpackJsonpshader-examples"]||[]).push([[0],{26:function(e,n,t){},44:function(e,n,t){},45:function(e,n,t){"use strict";t.r(n);var o=t(6),i=t.n(o),a=t(27),c=t.n(a),r=t(59),s=t(60),v=t(58),u=t(7),l=function(){return Object(u.jsx)(s.a,{position:"sticky",style:{backgroundColor:"black",padding:"10px"},children:Object(u.jsx)(v.a,{style:{display:"flex",justifyContent:"center"},children:Object(u.jsx)(r.a,{variant:"h2",style:{fontFamily:"Caveat"},children:"Shaders and ThreeJS"})})})},d=t(4),m=2,f=2,x=function(){return i.a.useEffect((function(){var e=document.getElementById("scene1"),n=e.parentNode.getBoundingClientRect();e.width=n.width,e.height=n.height;var t=new d.i,o=new d.o({canvas:e,antialias:!0}),i=new d.f(75,e.width/e.height,.1,1e4);i.position.set(0,0,20);var a=new d.a;o.setSize(e.width,e.height),o.setPixelRatio(window.devicePixelRatio);var c=new d.j({uniforms:{u_time:{value:0},u_resolution:{value:new d.m(100,100)},u_frequency:{value:m},u_amplitude:{value:f}},side:d.b,vertexShader:"\n    uniform float u_time;\n    uniform float u_frequency;\n    uniform float u_amplitude;\n    uniform vec2 u_resolution;\n    varying vec2 vUV;\n\n    vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n    float snoise(vec2 v) {\n        const vec4 C = vec4(0.211324865405187, 0.366025403784439,-0.577350269189626,0.024390243902439);\n        vec2 i  = floor(v + dot(v, C.yy) );\n        vec2 x0 = v -   i + dot(i, C.xx);\n        vec2 i1;\n        i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n        vec4 x12 = x0.xyxy + C.xxzz;\n        x12.xy -= i1;\n        i = mod289(i); // Avoid truncation effects in permutation\n        vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 ));\n        vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n        m = m*m ;\n        m = m*m ;\n        vec3 x = 2.0 * fract(p * C.www) - 1.0;\n        vec3 h = abs(x) - 0.5;\n        vec3 ox = floor(x + 0.5);\n        vec3 a0 = x - ox;\n        m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n        vec3 g;\n        g.x  = a0.x  * x0.x  + h.x  * x0.y;\n        g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n        return 130.0 * dot(m, g);\n    }\n\n    void main() {\n    vUV = uv;  \n    vec3 color = vec3(0.0);\n    vec2 pos = vec2(vUV*3.);\n\n    float DF = 0.0;\n\n    // Add a random position\n    float a = 0.0;\n    vec2 vel = vec2(u_time*.1);\n    DF += snoise(pos+vel)*.25+.25;\n\n    // Add a random position\n    a = snoise(pos*vec2(cos(u_time*0.15),sin(u_time*0.1))*0.1)*3.1415;\n    vel = vec2(cos(a),sin(a));\n    DF += snoise(pos+vel)*.25+.25;\n\n    color = vec3( smoothstep(.7,.75,fract(DF)) );\n\n    vec3 finalColor = vec3(1.0-color);\n\n        float height = finalColor.x+finalColor.y+finalColor.z;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position + vec3(0.0, 0.0, height) , 1.0);\n    }\n",fragmentShader:"\n    uniform float u_time;\n    uniform vec2 u_resolution;\n    varying vec2 vUV;\n\n    vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n    float snoise(vec2 v) {\n        const vec4 C = vec4(0.211324865405187, 0.366025403784439,-0.577350269189626,0.024390243902439);\n        vec2 i  = floor(v + dot(v, C.yy) );\n        vec2 x0 = v -   i + dot(i, C.xx);\n        vec2 i1;\n        i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n        vec4 x12 = x0.xyxy + C.xxzz;\n        x12.xy -= i1;\n        i = mod289(i); // Avoid truncation effects in permutation\n        vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 ));\n        vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n        m = m*m ;\n        m = m*m ;\n        vec3 x = 2.0 * fract(p * C.www) - 1.0;\n        vec3 h = abs(x) - 0.5;\n        vec3 ox = floor(x + 0.5);\n        vec3 a0 = x - ox;\n        m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n        vec3 g;\n        g.x  = a0.x  * x0.x  + h.x  * x0.y;\n        g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n        return 130.0 * dot(m, g);\n    }\n\n    void main() {\n    vec2 uv = vUV;\n    vec3 color = vec3(0.0);\n    vec2 pos = vec2(uv*3.);\n\n    float DF = 0.0;\n\n    // Add a random position\n    float a = 0.0;\n    vec2 vel = vec2(u_time*.1);\n    DF += snoise(pos+vel)*.25+.25;\n\n    // Add a random position\n    a = snoise(pos*vec2(cos(u_time*0.15),sin(u_time*0.1))*0.1)*3.1415;\n    vel = vec2(cos(a),sin(a));\n    DF += snoise(pos+vel)*.25+.25;\n\n    color = vec3( smoothstep(.7,.75,fract(DF)) );\n\n    gl_FragColor = vec4(1.0-color, 1.0);\n    }\n"}),r=new d.e(new d.g(80,80,500,500),c);t.add(r),function e(){requestAnimationFrame(e),r.material.uniforms.u_time.value+=a.getDelta(),o.render(t,i)}()}),[]),Object(u.jsx)("canvas",{id:"scene1"})},h=(t(26),function(){return Object(u.jsxs)("div",{className:"main-section",children:[Object(u.jsxs)("span",{style:{position:"absolute",marginTop:"-200px",paddingLeft:"50px",color:"black"},children:[Object(u.jsx)(r.a,{variant:"h2",style:{fontFamily:"Otomanopee One",paddingBottom:"10px"},children:"Immersive 3D animations"}),Object(u.jsx)(r.a,{variant:"h4",style:{fontFamily:"Otomanopee One"},children:"Generating patterns from simple Math functions"}),Object(u.jsx)(r.a,{style:{fontFamily:"kalam",paddingTop:"30px"},children:"{The demonstrations below are interactive.\n          Try dragging them with your mouse}"})]}),Object(u.jsx)("div",{style:{height:"100%",width:"100%"},children:Object(u.jsx)(x,{})})]})}),p=function(e){var n=e.inverted,t=e.head,o=e.subHead,i=e.scene;return Object(u.jsxs)("div",{className:"main-section",style:{flexDirection:n?"row-reverse":"row"},children:[Object(u.jsxs)("span",{style:{position:"absolute",marginTop:"-200px",paddingLeft:n?0:"50px",paddingRight:n?"50px":0},children:[Object(u.jsx)(r.a,{variant:"h2",style:{fontFamily:"kalam"},children:t}),Object(u.jsx)(r.a,{variant:"h4",style:{fontFamily:"kalam"},children:o})]}),Object(u.jsx)("div",{style:{height:"100%",width:"100%"},children:i})]})},g=t(18),w=2,y=2,j=function(){return i.a.useEffect((function(){var e=document.getElementById("scene4"),n=e.parentNode.getBoundingClientRect();e.width=n.width,e.height=n.height;var t=new d.i,o=new d.o({canvas:e,antialias:!0}),i=new d.f(75,e.width/e.height,.1,1e4);i.position.set(70,0,100);var a=new d.a,c=new g.a(i,e);c.enableZoom=!1,o.setSize(e.width,e.height),o.setPixelRatio(window.devicePixelRatio);var r=new d.j({uniforms:{u_time:{value:0},u_resolution:{value:new d.m(10,10)},u_frequency:{value:w},u_amplitude:{value:y}},side:d.b,vertexShader:"\n    uniform float u_time;\n    uniform float u_frequency;\n    uniform float u_amplitude;\n    uniform vec2 u_resolution;\n    varying vec2 vUV;\n\n    vec2 random2(vec2 st){\n      st = vec2( dot(st,vec2(127.1,311.7)),\n      dot(st,vec2(269.5,183.3)) );\n      return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n  }\n  \n  float noise(vec2 st) {\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n      vec2 u = f*f*(3.0-2.0*f);\n      return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                       dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                  mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                       dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n  }\n  \n\n    void main() {\n      vUV = uv;  \n    \n      vec3 color = vec3(0.0);\n\n      vec2 pos = vec2(vUV*10.0);\n\n      vec3 finalColor = vec3(noise(2.0*sin(u_time+pos)));\n\n      float height = finalColor.x+finalColor.y+finalColor.z;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position + 10.0*vec3(0.0, 0.0, sin(u_time+height)) , 1.0);\n    }\n",fragmentShader:"\n    uniform float u_time;\n    varying vec2 vUV;\n\n    vec2 random2(vec2 st){\n      st = vec2( dot(st,vec2(127.1,311.7)),\n      dot(st,vec2(269.5,183.3)) );\n      return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n    }\n  \n    float noise(vec2 st) {\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n  \n      vec2 u = f*f*(3.0-2.0*f);\n  \n      return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                       dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                  mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                       dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n    }\n\n    void main() {\n    vec2 uv = vUV;\n    \n    vec3 color = vec3(0.0);\n\n    vec2 pos = vec2(uv*10.0);\n\n    color = vec3( noise(2.0*sin(pos+u_time))*.5+.5 );\n\n    gl_FragColor = vec4(color * vec3(uv, sin(2.0*u_time)), 1.0);\n\n  }\n"}),s=new d.e(new d.g(200,200,500,500),r);s.position.x+=40,t.add(s),function e(){requestAnimationFrame(e),s.material.uniforms.u_time.value+=a.getDelta(),c.update(),o.render(t,i)}()}),[]),Object(u.jsx)("canvas",{id:"scene4"})},b=function(){return i.a.useEffect((function(){var e=document.getElementById("scene2"),n=e.parentNode.getBoundingClientRect();e.width=n.width,e.height=n.height;var t=new d.i,o=new d.o({canvas:e,antialias:!0}),i=new d.f(75,e.width/e.height,.1,1e4);i.position.set(-3,-9,3);var a=new d.a,c=new g.a(i,e);c.enableZoom=!1,o.setSize(e.width,e.height),o.setPixelRatio(window.devicePixelRatio);var r=new d.j({uniforms:{u_time:{value:0},u_resolution:{value:new d.m(5,5)}},side:d.b,vertexShader:"\n    uniform float u_time;\n    varying vec2 vUV;\n\n    float plot(vec2 st) {    \n      return smoothstep(0.02, 0.0, abs(st.y - st.x));\n    }\n\n    void main() {\n        vUV = uv;\n        float pct = 0.0;\n        pct = distance(vUV, vec2(0.5));\n        vec3 color = vec3(pct);\n        float height = color.x+color.y+color.z;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position + vec3(0.0, 0.0, 0.7*sin(5.0*u_time + 5.0*height)) , 1.0);\n    }\n",fragmentShader:"\n    uniform float u_time;\n    varying vec2 vUV;\n  \n    void main() {\n        float pct = 0.0;\n        pct = distance(vUV, vec2(0.5));\n        gl_FragColor = vec4(vec3(pct), 1.0);\n    }\n"}),s=new d.e(new d.g(8,8,100,100),r);s.position.x-=3,t.add(s),function e(){requestAnimationFrame(e),s.material.uniforms.u_time.value+=a.getDelta(),c.update(),o.render(t,i)}()}),[]),Object(u.jsx)("canvas",{id:"scene2"})},_=2,C=7,O=function(){return i.a.useEffect((function(){var e=document.getElementById("scene3"),n=e.parentNode.getBoundingClientRect();e.width=n.width,e.height=n.height;var t=new d.i,o=new d.o({canvas:e,antialias:!0}),i=new d.f(75,e.width/e.height,.1,1e4);i.position.set(0,-70,20);var a=new d.a,c=new g.a(i,e);c.enableZoom=!1,o.setSize(e.width,e.height),o.setPixelRatio(window.devicePixelRatio);var r=new d.j({uniforms:{u_time:{value:0},u_resolution:{value:new d.m(5,5)},u_frequency:{value:_},u_amplitude:{value:C}},side:d.b,vertexShader:"\n    uniform float u_time;\n    uniform float u_frequency;\n    uniform float u_amplitude;\n    varying vec2 vUV;\n\n    // 2D Random\n    float random (in vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))* 43758.5453123);\n    }\n  \n    // 2D Noise based on Morgan McGuire @morgan3d\n    // https://www.shadertoy.com/view/4dS3Wd\n    float noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n    }\n\n    void main() {\n        vUV = uv;\n        // Scale the coordinate system to see\n        // some noise in action\n        vec2 pos = vec2(vUV*5.0);\n\n        // Use the noise function\n        float n = noise(pos);\n\n        vec3 color = vec3(n);\n        float height = color.x+color.y+color.z;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position + vec3(0.0, 0.0, u_amplitude*sin(u_frequency*u_time+height)) , 1.0);\n    }\n",fragmentShader:"\n    uniform float u_time;\n    varying vec2 vUV;\n\n    // 2D Random\n    float random (in vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))* 43758.5453123);\n    }\n  \n    // 2D Noise based on Morgan McGuire @morgan3d\n    // https://www.shadertoy.com/view/4dS3Wd\n    float noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n    }\n\n    void main() {\n      vec2 pos = vec2(vUV*5.0);\n\n        // Use the noise function\n        float n = noise(pos);\n\n        vec3 color = vec3(n);\n      gl_FragColor = vec4(color, 1.0);\n    }\n"}),s=new d.e(new d.g(100,100,100,100),r);t.add(s),function e(){requestAnimationFrame(e),s.material.uniforms.u_time.value+=a.getDelta(),c.update(),o.render(t,i)}()}),[]),Object(u.jsx)("canvas",{id:"scene3"})},S=(t(44),function(){return Object(u.jsxs)("div",{className:"App",children:[Object(u.jsx)(l,{}),Object(u.jsx)(h,{}),Object(u.jsx)(p,{inverted:!0,head:"Sine Wave",subHead:"Combining circle's equation with the sine function",scene:Object(u.jsx)(b,{})}),Object(u.jsx)(p,{inverted:!1,head:"Simplex Noise",subHead:"Oscillating colors with sine function",scene:Object(u.jsx)(j,{})}),Object(u.jsx)(p,{inverted:!1,head:"Perlin Noise",subHead:"The base noise used for terraforming",scene:Object(u.jsx)(O,{})})]})});c.a.render(Object(u.jsx)(S,{}),document.getElementById("root"))}},[[45,1,2]]]);
//# sourceMappingURL=main.84fa1e81.chunk.js.map