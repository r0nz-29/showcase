{"version":3,"sources":["Header.jsx","Scene1.jsx","MainSection.jsx","Section.jsx","Scene4.jsx","Scene2.jsx","Scene3.jsx","App.js","index.js"],"names":["Header","AppBar","position","style","backgroundColor","padding","Toolbar","display","justifyContent","Typography","variant","fontFamily","configs","Scene1","React","useEffect","canvas","document","getElementById","rect","parentNode","getBoundingClientRect","width","height","scene","THREE","renderer","antialias","camera","set","clock","setSize","setPixelRatio","window","devicePixelRatio","material","uniforms","u_time","value","u_resolution","u_frequency","u_amplitude","side","vertexShader","fragmentShader","plane","add","animate","requestAnimationFrame","getDelta","render","id","MainSection","className","marginTop","paddingLeft","color","paddingBottom","paddingTop","Section","inverted","head","subHead","flexDirection","paddingRight","Scene4","controls","OrbitControls","enableZoom","x","update","Scene2","Scene3","App","ReactDOM"],"mappings":"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","file":"static/js/main.84fa1e81.chunk.js","sourcesContent":["import { Typography } from \"@material-ui/core\";\nimport { AppBar, Toolbar } from \"@material-ui/core\";\n\nconst Header = () => {\n    return (\n        <AppBar position=\"sticky\"\n        style={{\n            backgroundColor: 'black',\n            padding:'10px',\n        }}\n        >\n            <Toolbar style={{\n                display: 'flex',\n                justifyContent: 'center',\n            }} >\n                <Typography variant=\"h2\" style={{fontFamily: 'Caveat'}}>\n                    Shaders and ThreeJS\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport * as THREE from 'three';\n\nlet configs = {\n  frequency: 2.0,\n  amplitude: 2.0,\n};\n\nconst vShader = `\n    uniform float u_time;\n    uniform float u_frequency;\n    uniform float u_amplitude;\n    uniform vec2 u_resolution;\n    varying vec2 vUV;\n\n    vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n    float snoise(vec2 v) {\n        const vec4 C = vec4(0.211324865405187, 0.366025403784439,-0.577350269189626,0.024390243902439);\n        vec2 i  = floor(v + dot(v, C.yy) );\n        vec2 x0 = v -   i + dot(i, C.xx);\n        vec2 i1;\n        i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n        vec4 x12 = x0.xyxy + C.xxzz;\n        x12.xy -= i1;\n        i = mod289(i); // Avoid truncation effects in permutation\n        vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 ));\n        vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n        m = m*m ;\n        m = m*m ;\n        vec3 x = 2.0 * fract(p * C.www) - 1.0;\n        vec3 h = abs(x) - 0.5;\n        vec3 ox = floor(x + 0.5);\n        vec3 a0 = x - ox;\n        m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n        vec3 g;\n        g.x  = a0.x  * x0.x  + h.x  * x0.y;\n        g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n        return 130.0 * dot(m, g);\n    }\n\n    void main() {\n    vUV = uv;  \n    vec3 color = vec3(0.0);\n    vec2 pos = vec2(vUV*3.);\n\n    float DF = 0.0;\n\n    // Add a random position\n    float a = 0.0;\n    vec2 vel = vec2(u_time*.1);\n    DF += snoise(pos+vel)*.25+.25;\n\n    // Add a random position\n    a = snoise(pos*vec2(cos(u_time*0.15),sin(u_time*0.1))*0.1)*3.1415;\n    vel = vec2(cos(a),sin(a));\n    DF += snoise(pos+vel)*.25+.25;\n\n    color = vec3( smoothstep(.7,.75,fract(DF)) );\n\n    vec3 finalColor = vec3(1.0-color);\n\n        float height = finalColor.x+finalColor.y+finalColor.z;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position + vec3(0.0, 0.0, height) , 1.0);\n    }\n`;\n\nconst fShader = `\n    uniform float u_time;\n    uniform vec2 u_resolution;\n    varying vec2 vUV;\n\n    vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n    vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n    float snoise(vec2 v) {\n        const vec4 C = vec4(0.211324865405187, 0.366025403784439,-0.577350269189626,0.024390243902439);\n        vec2 i  = floor(v + dot(v, C.yy) );\n        vec2 x0 = v -   i + dot(i, C.xx);\n        vec2 i1;\n        i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n        vec4 x12 = x0.xyxy + C.xxzz;\n        x12.xy -= i1;\n        i = mod289(i); // Avoid truncation effects in permutation\n        vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 ));\n        vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n        m = m*m ;\n        m = m*m ;\n        vec3 x = 2.0 * fract(p * C.www) - 1.0;\n        vec3 h = abs(x) - 0.5;\n        vec3 ox = floor(x + 0.5);\n        vec3 a0 = x - ox;\n        m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n        vec3 g;\n        g.x  = a0.x  * x0.x  + h.x  * x0.y;\n        g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n        return 130.0 * dot(m, g);\n    }\n\n    void main() {\n    vec2 uv = vUV;\n    vec3 color = vec3(0.0);\n    vec2 pos = vec2(uv*3.);\n\n    float DF = 0.0;\n\n    // Add a random position\n    float a = 0.0;\n    vec2 vel = vec2(u_time*.1);\n    DF += snoise(pos+vel)*.25+.25;\n\n    // Add a random position\n    a = snoise(pos*vec2(cos(u_time*0.15),sin(u_time*0.1))*0.1)*3.1415;\n    vel = vec2(cos(a),sin(a));\n    DF += snoise(pos+vel)*.25+.25;\n\n    color = vec3( smoothstep(.7,.75,fract(DF)) );\n\n    gl_FragColor = vec4(1.0-color, 1.0);\n    }\n`;\n\nconst Scene1 = () => {\n  React.useEffect(() => {\n    const canvas = document.getElementById(\"scene1\");\n    let rect = canvas.parentNode.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n    const scene = new THREE.Scene();\n    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      canvas.width / canvas.height,\n      0.1,\n      10000\n    );\n    camera.position.set(0, 0, 20);\n    const clock = new THREE.Clock();\n    renderer.setSize(canvas.width, canvas.height);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    const material = new THREE.ShaderMaterial({\n      // wireframe: true,\n      uniforms: {\n        u_time: {\n          value: 0.0,\n        },\n        u_resolution: {\n          value: new THREE.Vector2(100.0, 100.0),\n        },\n        u_frequency: {\n          value: configs.frequency,\n        },\n        u_amplitude: {\n          value: configs.amplitude,\n        },\n      },\n      side: THREE.DoubleSide,\n      vertexShader: vShader,\n      fragmentShader: fShader,\n    });\n\n    const plane = new THREE.Mesh(\n      new THREE.PlaneGeometry(80.0, 80.0, 500, 500),\n      material\n    );\n\n    scene.add(plane);\n\n    function animate() {\n      requestAnimationFrame(animate);\n      plane.material.uniforms.u_time.value += clock.getDelta();\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n  }, [])\n  return (\n    <canvas id=\"scene1\"></canvas>\n  );\n}\nexport default Scene1;","import { Typography } from '@material-ui/core';\nimport React from 'react';\nimport Scene1 from './Scene1';\nimport './MainSection.css'\n\nconst MainSection = () => {\n  return (\n    <div className=\"main-section\" >\n      <span style={{ position: 'absolute', marginTop: '-200px', paddingLeft: '50px', color: 'black' }}>\n        <Typography variant=\"h2\" style={{fontFamily: 'Otomanopee One', paddingBottom: '10px'}} >\n          Immersive 3D animations\n        </Typography>\n        <Typography variant=\"h4\" style={{fontFamily: 'Otomanopee One'}} >\n          Generating patterns from simple Math functions\n        </Typography>\n        <Typography style={{fontFamily: 'kalam', paddingTop: '30px'}}>\n          {`{The demonstrations below are interactive.\n          Try dragging them with your mouse}`}\n        </Typography>\n      </span>\n      <div style={{ height: '100%', width: '100%' }}>\n        <Scene1 />\n      </div>\n    </div>\n  );\n}\n\nexport default MainSection;","import { Typography } from '@material-ui/core';\nimport React from 'react';\nimport './MainSection.css'\n\nconst Section = ({ inverted, head, subHead, scene }) => {\n  return (\n    <div className=\"main-section\" style={{ flexDirection: inverted ? 'row-reverse' : 'row' }}>\n      <span style={{ position: 'absolute', marginTop: '-200px', paddingLeft: inverted ? 0 : '50px', paddingRight: inverted ? \"50px\" : 0 }}>\n        <Typography variant=\"h2\" style={{fontFamily: 'kalam'}} >\n          {head}\n        </Typography>\n        <Typography variant=\"h4\" style={{fontFamily: 'kalam'}} >\n          {subHead}\n        </Typography>\n      </span>\n      <div style={{ height: '100%', width: '100%' }}>\n        {scene}\n      </div>\n    </div>\n  );\n}\n\nexport default Section;","import React from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\n\nlet configs = {\n  frequency: 2.0,\n  amplitude: 2.0,\n};\n\nconst vShader = `\n    uniform float u_time;\n    uniform float u_frequency;\n    uniform float u_amplitude;\n    uniform vec2 u_resolution;\n    varying vec2 vUV;\n\n    vec2 random2(vec2 st){\n      st = vec2( dot(st,vec2(127.1,311.7)),\n      dot(st,vec2(269.5,183.3)) );\n      return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n  }\n  \n  float noise(vec2 st) {\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n      vec2 u = f*f*(3.0-2.0*f);\n      return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                       dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                  mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                       dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n  }\n  \n\n    void main() {\n      vUV = uv;  \n    \n      vec3 color = vec3(0.0);\n\n      vec2 pos = vec2(vUV*10.0);\n\n      vec3 finalColor = vec3(noise(2.0*sin(u_time+pos)));\n\n      float height = finalColor.x+finalColor.y+finalColor.z;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position + 10.0*vec3(0.0, 0.0, sin(u_time+height)) , 1.0);\n    }\n`;\n\nconst fShader = `\n    uniform float u_time;\n    varying vec2 vUV;\n\n    vec2 random2(vec2 st){\n      st = vec2( dot(st,vec2(127.1,311.7)),\n      dot(st,vec2(269.5,183.3)) );\n      return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n    }\n  \n    float noise(vec2 st) {\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n  \n      vec2 u = f*f*(3.0-2.0*f);\n  \n      return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                       dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                  mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                       dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n    }\n\n    void main() {\n    vec2 uv = vUV;\n    \n    vec3 color = vec3(0.0);\n\n    vec2 pos = vec2(uv*10.0);\n\n    color = vec3( noise(2.0*sin(pos+u_time))*.5+.5 );\n\n    gl_FragColor = vec4(color * vec3(uv, sin(2.0*u_time)), 1.0);\n\n  }\n`;\n\n\nconst Scene4 = () => {\n  React.useEffect(() => {\n    const canvas = document.getElementById(\"scene4\");\n    let rect = canvas.parentNode.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n    const scene = new THREE.Scene();\n  const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\n  const camera = new THREE.PerspectiveCamera(\n    75,\n    canvas.width / canvas.height,\n    0.1,\n    10000\n  );\n  camera.position.set(70, 0, 100);\n  const clock = new THREE.Clock();\n  const controls = new OrbitControls(camera, canvas);\n  controls.enableZoom = false;\n  renderer.setSize(canvas.width, canvas.height);\n  renderer.setPixelRatio(window.devicePixelRatio);\n\n  const material = new THREE.ShaderMaterial({\n    // wireframe: true,\n    uniforms: {\n      u_time: {\n        value: 0.0,\n      },\n      u_resolution: {\n        value: new THREE.Vector2(10.0, 10.0),\n      },\n      u_frequency: {\n        value: configs.frequency,\n      },\n      u_amplitude: {\n        value: configs.amplitude,\n      },\n    },\n    side: THREE.DoubleSide,\n    vertexShader: vShader,\n    fragmentShader: fShader,\n  });\n\n  const plane = new THREE.Mesh(\n    new THREE.PlaneGeometry(200.0, 200.0, 500, 500),\n    material\n  );\n  plane.position.x += 40;\n  scene.add(plane);\n\n  function animate() {\n    requestAnimationFrame(animate);\n    plane.material.uniforms.u_time.value += clock.getDelta();\n    controls.update();\n    renderer.render(scene, camera);\n  }\n\n  animate();\n\n  }, [])\n  return (\n    <canvas id=\"scene4\"></canvas>\n  );\n}\nexport default Scene4;","import React from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\n\nconst vShader = `\n    uniform float u_time;\n    varying vec2 vUV;\n\n    float plot(vec2 st) {    \n      return smoothstep(0.02, 0.0, abs(st.y - st.x));\n    }\n\n    void main() {\n        vUV = uv;\n        float pct = 0.0;\n        pct = distance(vUV, vec2(0.5));\n        vec3 color = vec3(pct);\n        float height = color.x+color.y+color.z;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position + vec3(0.0, 0.0, 0.7*sin(5.0*u_time + 5.0*height)) , 1.0);\n    }\n`;\n\nconst fShader = `\n    uniform float u_time;\n    varying vec2 vUV;\n  \n    void main() {\n        float pct = 0.0;\n        pct = distance(vUV, vec2(0.5));\n        gl_FragColor = vec4(vec3(pct), 1.0);\n    }\n`;\n\nconst Scene2 = () => {\n  React.useEffect(() => {\n    const canvas = document.getElementById(\"scene2\");\n    let rect = canvas.parentNode.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n    const scene = new THREE.Scene();\n    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      canvas.width / canvas.height,\n      0.1,\n      10000\n    );\n    camera.position.set(-3, -9, 3);\n    const clock = new THREE.Clock();\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableZoom = false;\n    renderer.setSize(canvas.width, canvas.height);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    const material = new THREE.ShaderMaterial({\n      // wireframe: true,\n      uniforms: {\n        u_time: {\n          value: 0.0,\n        },\n        u_resolution: {\n          value: new THREE.Vector2(5.0, 5.0),\n        },\n      },\n      side: THREE.DoubleSide,\n      vertexShader: vShader,\n      fragmentShader: fShader,\n    });\n\n    const plane = new THREE.Mesh(\n      new THREE.PlaneGeometry(8.0, 8.0, 100, 100),\n      material\n    );\n    plane.position.x -= 3;\n    scene.add(plane);\n\n    function animate() {\n      requestAnimationFrame(animate);\n      plane.material.uniforms.u_time.value += clock.getDelta();\n      controls.update();\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n  }, [])\n  return (\n    <canvas id=\"scene2\"></canvas>\n  );\n}\nexport default Scene2;","import React from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\n\nlet configs = {\n  frequency: 2.0,\n  amplitude: 7.0,\n};\n\nconst vShader = `\n    uniform float u_time;\n    uniform float u_frequency;\n    uniform float u_amplitude;\n    varying vec2 vUV;\n\n    // 2D Random\n    float random (in vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))* 43758.5453123);\n    }\n  \n    // 2D Noise based on Morgan McGuire @morgan3d\n    // https://www.shadertoy.com/view/4dS3Wd\n    float noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n    }\n\n    void main() {\n        vUV = uv;\n        // Scale the coordinate system to see\n        // some noise in action\n        vec2 pos = vec2(vUV*5.0);\n\n        // Use the noise function\n        float n = noise(pos);\n\n        vec3 color = vec3(n);\n        float height = color.x+color.y+color.z;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position + vec3(0.0, 0.0, u_amplitude*sin(u_frequency*u_time+height)) , 1.0);\n    }\n`;\n\nconst fShader = `\n    uniform float u_time;\n    varying vec2 vUV;\n\n    // 2D Random\n    float random (in vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))* 43758.5453123);\n    }\n  \n    // 2D Noise based on Morgan McGuire @morgan3d\n    // https://www.shadertoy.com/view/4dS3Wd\n    float noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n    }\n\n    void main() {\n      vec2 pos = vec2(vUV*5.0);\n\n        // Use the noise function\n        float n = noise(pos);\n\n        vec3 color = vec3(n);\n      gl_FragColor = vec4(color, 1.0);\n    }\n`;\n\nconst Scene3 = () => {\n  React.useEffect(() => {\n    const canvas = document.getElementById(\"scene3\");\n    let rect = canvas.parentNode.getBoundingClientRect();\n    canvas.width = rect.width;\n    canvas.height = rect.height;\n    const scene = new THREE.Scene();\n    const renderer = new THREE.WebGLRenderer({ canvas, antialias: true });\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      canvas.width / canvas.height,\n      0.1,\n      10000\n    );\n    camera.position.set(0, -70, 20);\n    const clock = new THREE.Clock();\n    const controls = new OrbitControls(camera, canvas);\n    controls.enableZoom = false;\n    renderer.setSize(canvas.width, canvas.height);\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    const material = new THREE.ShaderMaterial({\n      // wireframe: true,\n      uniforms: {\n        u_time: {\n          value: 0.0,\n        },\n        u_resolution: {\n          value: new THREE.Vector2(5.0, 5.0),\n        },\n        u_frequency: {\n          value: configs.frequency,\n        },\n        u_amplitude: {\n          value: configs.amplitude,\n        },\n      },\n      side: THREE.DoubleSide,\n      vertexShader: vShader,\n      fragmentShader: fShader,\n    });\n\n    const plane = new THREE.Mesh(\n      new THREE.PlaneGeometry(100.0, 100.0, 100, 100),\n      material\n    );\n\n    scene.add(plane);\n\n    // const gui = new dat.GUI();\n\n    // gui.add(configs, \"frequency\", 2.0, 25.0).onChange(() => {\n    //   plane.material.dispose();\n    //   plane.material = new THREE.ShaderMaterial({\n    //     // wireframe: true,\n    //     uniforms: {\n    //       u_time: {\n    //         value: 0.0,\n    //       },\n    //       u_resolution: {\n    //         value: new THREE.Vector2(5.0, 5.0),\n    //       },\n    //       u_frequency: {\n    //         value: configs.frequency,\n    //       },\n    //       u_amplitude: {\n    //         value: configs.amplitude,\n    //       },\n    //     },\n    //     side: THREE.DoubleSide,\n    //     vertexShader: vShader,\n    //     fragmentShader: fShader,\n    //   });\n    //   scene.add(plane);\n    // });\n\n    // gui.add(configs, \"amplitude\", 2.0, 50.0).onChange(() => {\n    //   plane.material.dispose();\n    //   plane.material = new THREE.ShaderMaterial({\n    //     // wireframe: true,\n    //     uniforms: {\n    //       u_time: {\n    //         value: 0.0,\n    //       },\n    //       u_resolution: {\n    //         value: new THREE.Vector2(5.0, 5.0),\n    //       },\n    //       u_frequency: {\n    //         value: configs.frequency,\n    //       },\n    //       u_amplitude: {\n    //         value: configs.amplitude,\n    //       },\n    //     },\n    //     side: THREE.DoubleSide,\n    //     vertexShader: vShader,\n    //     fragmentShader: fShader,\n    //   });\n    //   scene.add(plane);\n    // });\n\n    function animate() {\n      requestAnimationFrame(animate);\n      plane.material.uniforms.u_time.value += clock.getDelta();\n      controls.update();\n      renderer.render(scene, camera);\n    }\n\n    animate();\n\n  }, [])\n  return (\n    <canvas id=\"scene3\"></canvas>\n  );\n}\nexport default Scene3;","import React from 'react';\nimport Header from './Header';\nimport MainSection from './MainSection';\nimport Section from './Section';\nimport Scene4 from './Scene4';\nimport Scene2 from './Scene2';\nimport Scene3 from './Scene3';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MainSection />\n      <Section inverted={true} head=\"Sine Wave\" subHead=\"Combining circle's equation with the sine function\" scene={<Scene2 />} />\n      <Section inverted={false} head=\"Simplex Noise\" subHead=\"Oscillating colors with sine function\" scene={<Scene4 />} />\n      <Section inverted={false} head=\"Perlin Noise\" subHead=\"The base noise used for terraforming\" scene={<Scene3 />} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}